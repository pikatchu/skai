/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
module CodeGen;

class Config{
  maxParams: Int = 5,
  maxFuns: Int = 5,
  maxTypes: Int = 5,
  maxBranches: Int = 6,
  maxWidth: Int = 5,
  maxSeqSize: Int = 20,
  matchProbability: Int = 50,
}

private class TypeEnv{
  typeIds: Map<String, Int>,
  types: Vector<Ast.Type>,
  branchTypes: Map<String, Int>,
  branches: Map<String, Ast.Branch>,
}

private mutable class Env{
  mutable seqSize: Int = 3,
  mutable locals: mutable Map<String, String> = mutable Map[],
  funs: mutable Vector<Ast.Fun> = mutable Vector[],
  funsReturning: mutable Map<String, mutable Vector<Ast.Fun>> = mutable Map[],
}

mutable class GenTypes{
  depth: Int,
  maxWidth: Int,
  maxHeight: Int,
  maxTypes: Int,
  mutable typeId: Int = 0,
  mutable types: mutable Vector<Ast.Type> = mutable Vector[],
  heights: mutable Map<String, Int> = mutable Map[],
} {
  mutable fun pushType(branches: Vector<Ast.Branch>): void {
    typeId = this.typeId.toString();
    this.!typeId = this.typeId + 1;
    ty = Ast.Type("Type_" + typeId, branches);
    this.types.push(ty);
  }

  /* To generate the types, we first generate so called "patterns".
   * The patterns are either "type" or "self", where "type" refers,
   * to a type that was not yet generated but that is different from
   * itself, and "self" refers to the type itself (a recursive definition).
   *
   * So at the end of genTypesPattern, the types have the following form:
   *
   * base class Type_XXX {
   *   children = C(type) | C(type, self)
   * }
   *
   * Note that all the constructors are called "C" and all the types are
   * patterns (either "type" or "self").
   * The subsequent phases will replace "type" with a type of choice, and
   * "self" with the type itself.
   *
   * This phase also makes sure that we are never generating isomorphic types,
   * types that are the same modulo reordering.
   * So for example, you will never see:
   * Type_1 = C() | C(type)   Type_2 = C(type) | C()
   *
   * Those two types are isomorphic in the sense that I could replace one by
   * the other by switching the order of the branches.
   */

  mutable fun genTypesPattern(): void {
    emptyCstr = Ast.Branch("C", Vector[]);
    this.pushType(Vector[emptyCstr]);
    first = 0;
    keepGoing = true;
    // Generating depth 0
    while (keepGoing) {
      !keepGoing = false;
      size = this.types.size();
      // Pushing an an additional field of type 'self'
      for (i in Range(first, size)) {
        oldBranches = this.types[i].branches;
        if (oldBranches.size() <= 1) continue;
        branches = Vector::mcreateFromItems(oldBranches);
        last = branches.size() - 1;
        lastBranch = branches[last];
        if (lastBranch.fields.size() >= this.maxWidth) continue;
        fields = Vector::mcreateFromItems(lastBranch.fields);
        fields.push("self");
        newBranch = Ast.Branch("C", freeze(fields));
        branches![branches.size() - 1] = newBranch;
        !keepGoing = true;
        this.pushType(freeze(branches));
      };
      // Pushing an an additional field of type 'type'
      for (i in Range(first, size)) {
        oldBranches = this.types[i].branches;
        branches = Vector::mcreateFromItems(oldBranches);
        last = branches.size() - 1;
        lastBranch = branches[last];
        if (
          lastBranch.fields.size() > 0 &&
          lastBranch.fields[lastBranch.fields.size() - 1] == "self"
        ) continue;
        if (lastBranch.fields.size() >= this.maxWidth) continue;
        fields = Vector::mcreateFromItems(lastBranch.fields);
        fields.push("type");
        newBranch = Ast.Branch("C", freeze(fields));
        branches![branches.size() - 1] = newBranch;
        !keepGoing = true;
        this.pushType(freeze(branches));
      };
      // Pushing an extra branch
      for (i in Range(first, size)) {
        oldBranches = this.types[i].branches;
        if (oldBranches.size() >= this.maxHeight) continue;
        branches = Vector::mcreateFromItems(oldBranches);
        branches.push(branches[branches.size() - 1]);
        !keepGoing = true;
        this.pushType(freeze(branches));
      };
      !first = size;
    };
  }

  mutable fun genTypes(): TypeEnv {
    this.genTypesPattern();
    first = 0;
    keepGoing = false;
    for (_ in Range(0, this.depth)) {
      for (typeId in Range(2, min(this.types.size(), this.maxTypes))) {
        !first = 0;
        !keepGoing = true;
        size = this.types.size();
        while (keepGoing) {
          !keepGoing = false;
          for (i in Range(first, size)) {
            this.types[i].substType(this.types[typeId].name) match {
            | None() -> void
            | Some(ty) ->
              !keepGoing = true;
              this.pushType(ty.branches)
            }
          };
          !first = size;
        }
      }
    };
    types = this.types.map(x -> x.renameSelfAndType());
    typeIds = mutable Map<String, Int>[];
    branchTypes = mutable Map<String, Int>[];
    branches = mutable Map<String, Ast.Branch>[];
    if (this.types.size() < 2) {
      print_error(
        "Not enough types where generated, please change the configuration",
      );
      exit(2)
    };
    for (id in Range(2, this.types.size())) {
      ty = types[id];
      typeIds![ty.name] = id;
      for (br in ty.branches) {
        branchTypes![br.name] = id;
        branches![br.name] = br;
      };
    };
    TypeEnv{
      typeIds => freeze(typeIds),
      branchTypes => freeze(branchTypes),
      branches => freeze(branches),
      types,
    }
  }
}

mutable class .CodeGen{
  config: Config = Config{},
  randomGen: mutable Random = Random::mcreate(23),
  typeEnv: TypeEnv,
  env: mutable Env = mutable Env{},
  mutable funNbr: Int = 0,
  funs: mutable Vector<Ast.Fun> = mutable Vector[],
  mutable count: Int = 0,
} {
  mutable fun random(n: Int): Int {
    if (n <= 0) 0 else this.randomGen.random(0, n)
  }

  mutable fun genSym(): String {
    this.!count = this.count + 1;
    "tmp_" + this.count
  }

  mutable fun genProgram(): Ast.Program {
    typeSize = this.typeEnv.types.size();
    this.resetSeqSize();
    invariant(typeSize > 2, "Not enough types were generated");
    inType = this.typeEnv.types[2 + this.random(typeSize - 2)];
    retType = this.typeEnv.types[2 + this.random(typeSize - 2)];
    _ = this.genFun(Vector[inType.name], retType.name);
    prog = Ast.Program(this.typeEnv.types, freeze(this.funs), inType.name);
    prog
  }

  mutable fun genFun(inputs: Vector<String>, output: String): Ast.Fun {
    seqSizeCopy = this.env.seqSize;
    localsCopy = this.env.locals;
    this.env.!locals = mutable Map[];
    for (i in Range(0, inputs.size())) {
      this.env.locals!["param" + i] = inputs[i]
    };
    funName = `fun_${this.funNbr}`;
    this.!funNbr = this.funNbr + 1;
    body = this.genFunBody(inputs, output);
    fun_ = Ast.Fun(funName, inputs, output, body);
    this.funs.push(fun_);
    this.env.!locals = localsCopy;
    this.env.!seqSize = seqSizeCopy;
    fun_
  }

  mutable fun genFunBody(inputs: Vector<String>, output: String): Ast.Body {
    is_match = (
      this.env.seqSize <= 0 ||
      this.random(100) < 50
    /*||
    this.random(100) < this.config.matchProbability */ );
    if (is_match) {
      Ast.BMatch(this.genMatch("ret", inputs[0], output))
    } else {
      localName = "ret";
      seq = this.genSeq(localName, output).reversed();
      Ast.BExpr(seq)
    }
  }

  mutable fun resetSeqSize(): void {
    this.env.!seqSize = this.random(this.config.maxSeqSize);
  }

  mutable fun genSeq(localName: String, typeName: String): Ast.Seq {
    this.env.!seqSize = this.env.seqSize - 1;
    if (
      this.env.locals.size() <= 1 ||
      this.env.seqSize <= 0 ||
      this.random(100) < 50
    ) {
      this.genConstr(localName, typeName)
    } else {
      this.genCall(localName, typeName)
    }
  }

  mutable fun genCall(localName: String, typeName: String): Ast.Seq {
    params = mutable Vector[];
    for (k => v in this.env.locals) {
      params.push((k, v))
    };
    argSize = min(params.size(), this.random(this.config.maxParams));
    !argSize = min(argSize, 1);
    nbrPicks = argSize;
    args = mutable Vector[];
    for (_ in Range(0, nbrPicks)) {
      pick = this.random(argSize);
      args.push(params[pick]);
      tmp = params[pick];
      params![pick] = params[argSize - 1];
      params![argSize - 1] = tmp;
      !argSize = argSize - 1;
    };
    args.sort();
    f = this.genFun(freeze(args.map(x -> x.i1)), typeName);
    List[(localName, Ast.Call(f.name, freeze(args.map(x -> x.i0))))]
  }

  mutable fun genMatch(
    localName: String,
    input: String,
    output: String,
  ): Vector<(Ast.Pattern, Ast.Seq)> {
    // Since we pattern-machted on param0, it should no longer be accessible
    this.env.locals.remove("param0");

    typeId = this.typeEnv.typeIds[input];
    ty = this.typeEnv.types[typeId];
    ty.branches
      .map(branch -> {
        fields = branch.fields.map(typeName -> {
          name = this.genSym();
          this.env.locals![name] = typeName;
          name
        });
        pat = Ast.Pattern(branch.name, fields);
        seq = this.genSeq(localName, output).reversed();
        (pat, seq)
      })
      .collect(Vector)
  }

  mutable fun genConstr(localName: String, typeName: String): Ast.Seq {
    typeId = this.typeEnv.typeIds[typeName];
    ty = this.typeEnv.types[typeId];
    branchNbr = if (this.env.seqSize <= 0 || ty.branches.size() <= 1) 0 else {
      1 + this.random(ty.branches.size() - 1)
    };
    branch = ty.branches[branchNbr];
    (seq, cstr) = this.genConstrAcc(List[], branch.name);
    List.Cons((localName, cstr), seq)
  }

  mutable fun genConstrAcc(
    acc: Ast.Seq,
    cstrName: String,
  ): (Ast.Seq, Ast.Construct) {
    branch = this.typeEnv.branches[cstrName];
    fields = branch.fields.map(typeName -> {
      localName = this.genSym();
      newSeq = this.genSeq(localName, typeName);
      (newSeq, localName)
    });
    !acc = fields.map(x -> x.i0).reduce((x, y) -> x.concat(y), acc);
    (acc, Ast.Construct(branch.name, fields.map(x -> x.i1)))
  }
}

module end;
