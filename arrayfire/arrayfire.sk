module ArrayFire;

@cpp_extern
native class Dims

@cpp_extern
native class Type

@cpp_extern
native class Array {
  fun -(rhs: Array): Array {
    minus_aa(this, rhs)
  }

  fun +(rhs: Array): Array {
    plus_aa(this, rhs)
  }

  fun /(rhs: Array): Array {
    div_aa(this, rhs)
  }

  fun *(rhs: Array): Array {
    mult_aa(this, rhs)
  }

  fun negate(): Array {
    negate(this)
  }

  fun scalar(): Float {
    scalar(this)
  }

  // static fun createFromItems(Sequence<Array>) {
  //   // TODO: use specialized function for size <= 4.
  // }
}

class Const(value: Float) {
  fun *(rhs: Array): Array {
    mult_fa(this.value, rhs)
  }

  fun +(rhs: Array): Array {
    plus_fa(this.value, rhs)
  }

  fun -(rhs: Array): Array {
    minus_fa(this.value, rhs)
  }

  fun /(rhs: Array): Array {
    div_fa(this.value, rhs)
  }
}

@cpp_extern
native fun join(Int, Array, Array): Array;

@cpp_extern
native fun scalar(Array): Float;

@cpp_extern
native fun getType(Array): Type;

@cpp_extern
native fun numDims(Array): Int;

@cpp_extern
native fun getDim(Array, Int): Int;

@cpp_extern
native fun getDims(Array): Dims;

@cpp_extern
native fun allTrue(Array): Bool;

@cpp_extern
native fun abs(Array): Array;

@cpp_extern
native fun mult_aa(Array, Array): Array;

@cpp_extern
native fun div_aa(Array, Array): Array;

@cpp_extern
native fun div_fa(Float, Array): Array;

@cpp_extern
native fun mult_ia(Int, Array): Array;

@cpp_extern
native fun mult_fa(Float, Array): Array;

@cpp_extern
native fun plus_aa(Array, Array): Array;

@cpp_extern
native fun plus_fa(Float, Array): Array;

@cpp_extern
native fun minus_aa(Array, Array): Array;

@cpp_extern
native fun minus_fa(Float, Array): Array;

@cpp_extern
native fun negate(Array): Array;

@cpp_extern
native fun lt_av(Array, Float): Array;

@cpp_extern
native fun constant(Float, Int): Array;

@cpp_extern
native fun constant_of_int(Int, Array): Array;

@cpp_extern
native fun constant_of_float(Float, Array): Array;

@cpp_extern
native fun constant_one(Array): Array;

@cpp_extern
native fun print(Array): void;

untracked @cpp_extern
native fun randu(Int, Int = 0, Int = 0, Int = 0): Array;

@cpp_extern
native fun eval(Array): void;

@cpp_extern
native fun exp(Array): Array;

@cpp_extern
native fun sin(Array): Array;

@cpp_extern
native fun cos(Array): Array;

@cpp_extern
native fun tan(Array): Array;

@cpp_extern
native fun matmul(Array, Array): Array;

@cpp_extern
native fun transpose(Array): Array;

module end;
