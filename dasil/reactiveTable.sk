/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
module Reactive;

private class RefCountedTable<T: frozen & Hashable & Equality & Orderable>(
  cache: Reactive.GlobalCache<Map<T, Int>>,
) {
  fun create(): this {
    static(Reactive.GlobalCache::make())
  }

  untracked fun add(key: String, values: Array<T>): void {
    newMap = this.cache.maybeGet(key) match {
    | None() ->
      newMap = mutable Map[];
      values.each(value -> newMap![value] = 1);
      newMap
    | Some(map) ->
      newMap = map.clone();
      values.each(value -> {
        refCount = if (map.containsKey(value)) map[value] else 0;
        newMap![value] = refCount + 1;
      });
      newMap
    };
    this.cache.set(key, unsafe_chill_trust_me(newMap));
  }

  untracked fun remove(key: String, values: Array<T>): void {
    newMap = this.cache.maybeGet(key) match {
    | None() -> invariant_violation("Cannot remove a nonexistent entry")
    | Some(map) ->
      newMap = map.clone();
      values.each(value -> {
        refCount = if (map.containsKey(value)) map[value] else 0;
        !refCount = refCount - 1;
        if (refCount > 0) {
          newMap![value] = refCount;
        } else {
          newMap.remove(value);
        }
      });
      newMap
    };
    this.cache.set(key, unsafe_chill_trust_me(newMap));
  }

  memoized fun get(key: String): Array<T> {
    result = mutable Vector[];
    this.cache.maybeGet(key).each(map ->
      map.each((key, refCount) -> {
        invariant(refCount > 0);
        result.push(key)
      })
    );
    result.sort();
    result.toArray()
  }
}

private mutable class ArrayDiff<T: Orderable>{
  oldValues: Array<T>,
  newValues: Array<T>,
  mutable index1: Int = 0,
  mutable index2: Int = 0,
  toRemove: mutable Vector<T> = mutable Vector[],
  toAdd: mutable Vector<T> = mutable Vector[],
} {
  private mutable fun loopThis(): void {
    valueOpt1 = this.oldValues.maybeGet(this.index1);
    valueOpt2 = this.newValues.maybeGet(this.index2);
    (valueOpt1, valueOpt2) match {
    | (None(), None()) -> void
    | (None(), Some(value)) ->
      this.toAdd.push(value);
      this.!index2 = this.index2 + 1;
      this.loopThis()
    | (Some(value), None()) ->
      this.toRemove.push(value);
      this.!index1 = this.index1 + 1;
      this.loopThis()
    | (Some(value1), Some(value2)) ->
      compare(value1, value2) match {
      | LT() ->
        this.toRemove.push(value1);
        this.!index1 = this.index1 + 1
      | GT() ->
        this.toAdd.push(value2);
        this.!index2 = this.index2 + 1
      | EQ() ->
        this.!index1 = this.index1 + 1;
        this.!index2 = this.index2 + 1
      };
      this.loopThis()
    }
  }
  mutable fun getResult(): (Array<T>, Array<T>) {
    this.loopThis();
    (this.toRemove.toArray(), this.toAdd.toArray())
  }
}

private fun diffArrays<T: Orderable>(
  oldValues: Array<T>,
  newValues: Array<T>,
): (Array<T>, Array<T>) {
  vecDiff = mutable ArrayDiff{oldValues, newValues};
  vecDiff.getResult()
}

class Table<T: frozen & Hashable & Equality & Orderable> private {
  refCountedTable: RefCountedTable<T>,
  sourceTable: Reactive.GlobalCache<Array<T>>,
} {
  static fun create(): this {
    static{
      refCountedTable => RefCountedTable(Reactive.GlobalCache::make()),
      sourceTable => Reactive.GlobalCache::make(),
    }
  }

  untracked fun set(source: String, key: String, values: Array<T>): void {
    sourceKey = source + ":" + key;
    newValues = {
      x = Vector::mcreateFromItems(values);
      x.sort();
      x.unique().toArray()
    };
    this.sourceTable.maybeGet(sourceKey) match {
    | None() ->
      this.sourceTable.set(sourceKey, newValues);
      this.refCountedTable.add(key, newValues)
    | Some(oldValues) ->
      this.sourceTable.set(sourceKey, newValues);
      (toRemove, toAdd) = diffArrays(oldValues, newValues);
      if (toRemove.size() > 0) this.refCountedTable.remove(key, toRemove);
      if (toAdd.size() > 0) this.refCountedTable.add(key, toAdd)
    }
  }

  fun get(key: String): Array<T> {
    this.refCountedTable.get(key)
  }
}

module end;

module TestReactive;

class TestFailure() extends Exception

fun testTable(
  rtable: Reactive.Table<String>,
  map: readonly Map<(String, String), Array<String>>,
  keyRange: Int,
): void {
  for (keyNbr in Range(0, keyRange)) {
    key = "" + keyNbr;
    values = mutable Vector[];
    for (sourceKey => array in map) {
      (_, k) = sourceKey;
      if (k == key) {
        array.each(value -> values.push(value))
      }
    };
    values.sort();
    valuesMap = values.unique().toArray().map(x -> x.toString());
    valuesTable = rtable.get(key);
    if (valuesMap != valuesTable) {
      debug(`Inconsistent result for key: ${key}`);
      debug(`TestMap says: ${valuesMap}`);
      debug(`Rtable says : ${valuesTable}`);
      throw TestFailure();
    }
  }
}

untracked fun test(): void {
  // Config
  sourceRange = 8;
  keyRange = 8;
  valueSize = 8;
  valueRange = 8;
  iterations = 10000;
  percentChancesOfRemoval = 10;
  verbose = false;

  debug("Reactive table Test: STARTING");
  try {
    r = Random::mcreate(23);
    rtable = Reactive.Table::create();

    map = mutable Map<(String, String), Array<String>>[];
    for (_ in Range(0, iterations)) {
      source = "" + r.random(0, sourceRange);
      key = "" + r.random(0, keyRange);
      if (r.random(0, 100) < percentChancesOfRemoval) {
        rtable.set(source, key, Array[]);
        map![(source, key)] = Array[];
      } else {
        values = mutable Vector[];
        for (_ in Range(0, valueSize)) {
          values.push("" + r.random(0, valueRange));
        };
        if (verbose) {
          debug(`Adding: (${source}, ${key}) => ${values})`);
        };
        arr = values.toArray();
        rtable.set(source, key, arr);
        map![(source, key)] = arr;
        rtable.set(source, key, arr);
        testTable(rtable, map, keyRange);
      }
    };
    debug("Reactive table test: OK");
  } catch {
  | TestFailure() -> debug("FAILED")
  }
}

module end;
