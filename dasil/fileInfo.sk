/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
module Dasil;

/******************************************************************************
 * Types.
 *****************************************************************************/

value class Symbol(name: String, pos: Int)
value class RelativePos(line: Int, col: Int)

/******************************************************************************
 * Source code caches.
 *****************************************************************************/

// Associates: fileName => Array<Char>
const sourceTable: Reactive.Table<Array<Char>> = Reactive.Table::create();

untracked fun populateSource(fileName: String, fileContent: String): void {
  sourceTable.set(fileName, fileName, Array[fileContent.chars().toArray()]);
}

fun getSource(fileName: String): Array<Char> {
  contents = sourceTable.get(fileName);
  invariant(contents.size() == 1);
  contents[0]
}

/******************************************************************************
 * Symbols table.
 *****************************************************************************/

// Associates: symbolName => (fileName, filePosition, positionNextSymbol)
const symbolTable: Reactive.Table<
  (String, Int, Int),
> = Reactive.Table::create();

fun getSymbols(chars: Array<Char>): Array<Symbol> {
  lexer = Lexer::create("", 0, chars);
  symbols = mutable Vector[];
  pos = 0;
  loop {
    token = lexer.next(pos);
    !pos = token.posEnd;
    token.kind match {
    | TEOF() -> return symbols.toArray()
    | TWord() if (lexer.matches(token, "function")) ->
      !token = lexer.next(pos);
      while (
        lexer.next(pos).kind match {
        | TNewline()
        | TSpace()
        | TComment() ->
          true
        | _ -> false
        }
      ) {
        !pos = token.posEnd;
        !token = lexer.next(pos)
      };
      symbols.push(Symbol(lexer.mkString(token), token.posBegin))
    | _ -> void
    }
  }
}

untracked fun populateSymbols(fileName: String): Errors {
  content = getSource(fileName);
  symbols = getSymbols(content);

  errs = Errors[];

  // Look for duplicates
  symbolMap = mutable Map<String, (Int, Int)>[];
  for (i in Range(0, symbols.size())) {
    symbol = symbols[i];
    nextSymbolPos = if (i + 1 < symbols.size()) {
      symbols[i + 1].pos
    } else {
      content.size()
    };
    if (symbolMap.containsKey(symbol.name)) {
      !errs = errs.add(
        DuplicateSymbolInFile(
          fileName,
          symbol.name,
          symbolMap[symbol.name].i0,
          symbol.pos,
        ),
      );
    } else {
      symbolMap![symbol.name] = (symbol.pos, nextSymbolPos);
    }
  };

  for (symbol => posAndPosNext in symbolMap) {
    (pos, posNext) = posAndPosNext;
    symbolTable.set(fileName, symbol, Array[(fileName, pos, posNext)])
  };

  errs
}

/******************************************************************************
 * Newlines table.
 *****************************************************************************/

const newlinesTable: Reactive.Table<Int> = Reactive.Table::create();

untracked fun populateNewlines(fileName: String): void {
  content = getSource(fileName);
  newlines = mutable Vector[];
  for (i => c in content) {
    c match {
    | '\n' -> newlines.push(i)
    | _ -> void
    }
  };
  newlinesTable.set(fileName, fileName, newlines.toArray());
}

fun getRelativePos(fileName: String, pos: Int): RelativePos {
  newlines = newlinesTable.get(fileName);
  line = getLine(newlines, pos, 0, newlines.size() - 1);
  linePos = getLinePos(newlines, line);
  RelativePos(line + 2, pos - linePos)
}

private fun getLine(newlines: Array<Int>, pos: Int, i: Int, j: Int): Int {
  if (i > j) return j;
  pivot = (i + j) / 2;
  pivotPos = newlines[pivot];
  if (pos > pivotPos) {
    getLine(newlines, pos, pivot + 1, j)
  } else if (pos < pivotPos) {
    getLine(newlines, pos, i, pivot - 1)
  } else {
    pivot
  };
}

private fun getLinePos(newlines: Array<Int>, pos: Int): Int {
  if (pos < 0) 0 else (newlines[pos] + 1)
}

/******************************************************************************
 * Main entry point.
 *****************************************************************************/

untracked fun addFile(fileName: String, fileContent: String): Errors {
  populateSource(fileName, fileContent);
  errors = populateSymbols(fileName);
  populateNewlines(fileName);
  errors
}

module end;

module DasilFileInfoTest;

fun go(): void {
  rgen = Random::mcreate(23);
  maxSize = 100;
  content = mutable Vector<Char>[];
  line = 1;
  col = 1;
  symbolNbr = 0;
  addChar = c -> {
    !col = col + 1;
    content.push(c)
  };
  addString = str -> {
    for (c in str) {
      addChar(c)
    }
  };
  for (_ in Range(0, rgen.random(0, maxSize))) {
    rgen.random(0, 7) match {
    | 0 -> addChar('3')
    | 1 ->
      addChar('\n');
      !line = line + 1;
      !col = 1
    | 2 -> addChar(' ')
    | 3 ->
      addChar('/');
      addChar('*');
      for (_ in Range(0, rgen.random(0, maxSize))) {
        addChar('0')
      };
      addChar('*');
      addChar('/')
    | 4 ->
      addChar('"');
      for (_ in Range(0, rgen.random(0, maxSize))) {
        addChar('0')
      };
      addChar('"')
    | 5 -> addChar(';')
    | _ ->
      addString("function ");
      !symbolNbr = symbolNbr + 1;
      addString("symbol" + symbolNbr);
      addChar(' ')
    }
  };
  result = String::fromChars(content.toArray());
  debug(result);
}
module end;
