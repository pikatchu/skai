/* Pretty-printer for the ast
 */

extension class Fun uses Show {
  fun toString(): String {
    `function ${this.name}${this.sig} ${this.bodyToString()}`
  }

  fun bodyToString(): String {
    this.body match {
    | None() -> ";"
    | Some(eqs) -> `{\n  ${eqs.join("\n  ")}\n}\n`
    }
  }
}

extension class FunSig uses Show {
  fun toString(): String {
    `(${this.params.join(", ")}): ${this.returnType}`
  }
}

extension class Param uses Show {
  fun toString(): String {
    `${this.name} : ${this.type_}`
  }
}

extension base class Type uses Show {
  fun toString(): String {
    this match {
    | TInt() -> "int"
    | TFloat() -> "float"
    | TArray(ty) -> `[${ty.toString()}]`
    }
  }
}

extension class Equation uses Show {
  fun toString(): String {
    `${this.lhs} = ${this.rhs};`
  }
}

extension base class Lhs uses Show {
  fun toString(): String {
    this match {
    | LName(n) -> n
    | LUnder() -> "_"
    | LList(l) -> `(${l.join(", ")})`
    }
  }
}

extension base class Expr uses Show {
  fun toString(): String {
    this match {
    | EIConst(v) -> v.toString()
    | EFConst(v) -> v.toString()
    | EVar(v) -> v
    | EArray(v) -> `[${v.join(", ")}]`
    | EBinop(o, e1, e2) -> `${this.paren(e1, 0)} ${o} ${this.paren(e2, 1)}`
    | ECall(n, a) -> `${n}(${a.join(", ")})`
    | EAccess(e1, e2) -> `${e1}[${e2}]`
    }
  }

  private fun paren(x: Expr, lvloffset: Int): String {
    req_level = this.level() - lvloffset;
    if (x.level() > req_level) `(${x})` else x.toString()
  }

  private fun level(): Int {
    this match {
    | EBinop(Plus(), _, _) -> 2
    | EBinop(Minus(), _, _) -> 2
    | EBinop(Mult(), _, _) -> 1
    | EBinop(Div(), _, _) -> 1
    | _ -> 0
    }
  }
}

extension base class Bop uses Show {
  fun toString(): String {
    this match {
    | Plus() -> "+"
    | Minus() -> "-"
    | Mult() -> "*"
    | Div() -> "/"
    }
  }
}
