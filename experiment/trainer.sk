module Skai;

mutable class Trainer {
  model: SkaiModel.Model,
  loss_fun: (Tensor, Tensor) -> Tensor,
  opt: Optimizer,
  params: mutable Tensor.Params
} {
  // mutable fun loss(data: Sequence<(AF.Array, AF.Array)>): Float {
  //   data.map(d -> {
  //     (xi, yi) = d;
  //     this.loss_fun(this.model.forward(Tensor.Input(xi)), Tensor.Input(yi))
  //     .eval(this.params)
  //     .scalar()
  //   }).sumFloat() / data.size().toFloat();
  // }

  // untracked mutable fun step(data: Sequence<(AF.Array, AF.Array)>): void {
  //   this.opt.step((xi, yi) -> { this.loss_fun(this.model.forward(xi), yi) },
  //                 data, this.params);
  // }
}

module end;
