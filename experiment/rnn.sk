module alias AF = ArrayFire;

untracked fun buildRnn(): void {
  n = 10;
  d = 4;

  rand = Random::mcreate(1337);
  data = Range(0, 100).map(_ -> {
    l = rand.random(1, 12);
    (
      Range(0, l).map(_ -> { Tensor.Input(AF.randu(d)) }),
      Tensor.Input(AF.randu(n))
    )
  });

  params = mutable Tensor.Params();
  r = params.add(AF.randu(n, n));
  w = params.add(AF.randu(n, d));

  lr = 0.5;
  for (di in data) {
    (xis, yi) = di;
    h: Tensor = Tensor.Constant(1.0, n);
    for (xi in xis) {
      !h = Tensor.MatMul(w, xi) + Tensor.MatMul(r, h)
    };

    loss = Loss.mse(h, yi);

    grads = loss.backward(params);

    params![r] = params[r] + AF.Const(lr) * grads[r];
    params![r] = params[r] + AF.Const(lr) * grads[r];
    AF.print(grads[r]);
  };
}
